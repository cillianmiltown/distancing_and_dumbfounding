---
title: "Sample and Simulated Data"
author: "Cillian McHugh"
date: "`r format(Sys.time(), '%d %B, %Y')`"
keywords          : "moral dumbfounding, dual-processes, reasons, intuitions"
bibliography: "resources/bib/My Library.bib"
figsintext        : yes
figurelist        : yes
tablelist         : yes
footnotelist      : no
lineno            : yes
lang              : "english"
class             : "man"
format:
  html:
    toc: true
    toc-depth: 4
    toc-location: left
editor_options: 
  chunk_output_type: console
---


```{r ch5setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = FALSE)
#options(scipen=1, digits=2)
# knitr::opts_chunk$set(fig.path='figure/graphics-', 
#                       cache.path='cache/graphics-', 
#                       fig.align='center',
#                       external=TRUE,
#                       echo=FALSE,
#                       warning=FALSE,
#                       fig.pos='H'
# )
```


```{r}
rm(list=ls())
library(conflicted)
library(tidyverse)
library(mlogit)
library(DescTools)
library(nnet)
library(pwr)
#library(reshape2)
#conflicts_prefer(dplyr::filter, .quiet = TRUE)

```


```{r}
N <- 4800
session_seed <- 4
save(N,file = "N.RData")

source("simulate_data.R")

x <- simulated_data_scenarios

```

```{r}

table(x$condition6)
table(x$psych,x$temp)

```



```{r}
#| include: false


```


### Distancing and Dumbfounding



```{r}

revised_PseudoR2s <- function(LogModel) {
  dev <- LogModel$deviance
  nullDev <- LogModel$null.deviance
  modelN <- length(LogModel$fitted.values)
  R.l <- 1 - dev / nullDev
  R.cs <- 1- exp ( -(nullDev - dev) / modelN)
  R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
  
  all <- list(hosmer_and_lemeshow = as.numeric(R.l), mcfadden = NA, cox_and_snell = as.numeric(R.cs), nagelkerke = as.numeric(R.n))
  all
}

```



```{r}

model0 <- glm(cs~1,x, family = binomial(link = "logit"))
model1 <- glm(cs~psych+temp,x, family = binomial(link = "logit"))

chi1 <- anova(model0,model1, test = "Chisq")[2,]

c <- chi1$Deviance
w <- sqrt(c/length(x$cs))
pw <- pwr.chisq.test(w=w,N=length(x$cs),df=(chi1$Df),sig.level = .05)

a <- exp(confint(model1))

cox <- revised_PseudoR2s(model1)
cox

test <- as.data.frame(summary(model1)$coefficients)
psych_coeffs <- test[2,] # model1_summary$coefficients[2,]

psych_coeffs$`z value`

```




```{r}
#| include: false

# mlogit_PseudoR2s <- function(model0R2,model1R2) {
#   dev <- abs(model1R2$logLik)
#   nullDev <- abs(model0R2$logLik)
#   modelN <- length(model1R2$fitted.values)
#   R.l <- 1 - dev / nullDev
#   R.cs <- 1- exp ( -(nullDev - dev) / modelN)
#   R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
#   
#   all <- list(hosmer_and_lemeshow = as.numeric(R.l), mcfadden = NA, cox_and_snell = as.numeric(R.cs), nagelkerke = as.numeric(R.n))
#   all
# }
# 
# x_interaction <- x[which(x$temp!="control"),]
# x_interaction$temp <- droplevels(x_interaction$temp)
# x_interaction <- 
#   x_interaction %>% mutate(
#     temp_recode = recode(temp, "now" = 0, "future" = 1)
#     ,psych_recode = recode(psych, "self" = 0, "other" = 1)
#   )
# 
# x_logit <- mlogit.data(x, choice = "cs", shape = "wide")
# 
# #logitmodel <- mlogit(cs ~ 1 | psych+temp, data = x_logit)# , reflevel = 2)
# model0 <- mlogit(cs ~ 1| 1 , data = x_logit)# , reflevel = 2)
# model1 <- mlogit(cs ~ 1 |  psych + temp + psych:temp, data = x_logit , reflevel = 2)
# 
# 
# summary(model1)
# summary(model0)
# 
# model1$logLik
# model0$logLik
# 
# 
# summary_model1 <- summary(model1)
# 
# 
# 
# c <- summary_model1$lratio$statistic
# w <- sqrt(c/length(x$cs))
# pw <- pwr.chisq.test(w=w,N=length(x$cs),df=(chi1$Df),sig.level = .05)
# 
# 
# 
# 
# 
# summary_model1 <- summary(model1)
# summary_model1$CoefTable
# 
# summary_model1$lratio$parameter
# summary_model1$lratio$statistic
# summary_model1$lratio$p.value
# 
# summary_model1$lratio$statistic
# 
# 
# a <- exp(confint(model1))
# 
# cox <- mlogit_PseudoR2s(model0,model1)
# cox
# 
# test <- as.data.frame(summary_model1$CoefTable)
# 
# future <- test[]


```



```{r}
#| include: false

multinom_PseudoR2s <- function(model0R2,model1R2) {
  dev <- abs(model1R2$deviance)
  nullDev <- abs(model0R2$deviance)
  modelN <- length(model1R2$fitted.values)
  R.l <- 1 - dev / nullDev
  R.cs <- 1- exp ( -(nullDev - dev) / modelN)
  R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
  
  all <- list(hosmer_and_lemeshow = as.numeric(R.l), mcfadden = NA, cox_and_snell = as.numeric(R.cs), nagelkerke = as.numeric(R.n))
  all
}



model0 <- nnet::multinom(cs~1,x) 
model1 <- nnet::multinom(cs~psych+temp+psych*temp,x) 

summary_model1 <- broom::tidy(model1)

summary_model1$p.value

chi_full <- anova(model0,model1)
chi1 <- anova(model0,model1)[2,]

chi_full$`Resid. Dev`[2]
chi_full$`Resid. Dev`[1]

chi_df <- chi1$`   Df`
chi_p <- chi1$`Pr(Chi)`

chi_df
model0$deviance
model1$deviance
model1$fitted.values

chi1$`LR stat.`
c <- chi1$`LR stat.`
w <- sqrt(c/length(x$cs))
pw <- pwr.chisq.test(w=w,N=length(x$cs),df=(chi_df),sig.level = .05)


cox <- multinom_PseudoR2s(model0,model1)
cox

c

summary_model1
summary_model1[2,]
psych_self_dumb <- summary_model1[2,]

wald_OR <- function(term){
term$wald <- (term$statistic)*2
term$OR <- exp(term$estimate)
term
}

psych_self_dumb <- summary_model1[2,]
psych_self_dumb <- wald_OR(psych_self_dumb)


temp_fututre_dumb <- summary_model1[3,]
temp_fututre_dumb <- wald_OR(temp_fututre_dumb)

temp_fututre_dumb$wald
temp_fututre_dumb$p.value

psych_self_dumb$OR
exp(confint(model1))

x$ju1_2



a <- exp(confint(model1))
a[3]
a[9]



```




Overall the model significantly predicted responses to the critical slide
$\chi$^2^(`r chi_df`,
*N* = `r length(x$cs)`) =
`r round(c, digits=2)`,
*p* `r paste(p_report(chi_p))`, The observed power was
`r round(pw$power,digits=2)`.
 The model explained between
`r round(cox$cox_and_snell*100, digits=2)`% (Cox and Snell R square) and
`r round(cox$nagelkerke*100, digits=2)`% (Nadelkerke R squared) of the variance in responses to the critical slide. 
For scenarios in the future, participants were more likely to provide reasons than to present as dumbfounded
Wald = `r round(temp_fututre_dumb$wald,digits=2)`,
*p* `r paste(p_report(temp_fututre_dumb$p.value))`, odds ratio = `r round(temp_fututre_dumb$OR,digits=2)`, 95% CI [`r round(a[3],digits=2)`, `r round(a[9],digits=2)`],